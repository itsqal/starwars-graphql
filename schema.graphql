type Query {
    allCharacters: [Character!]!
    character(id: ID!): Character
    allPlanets: [Planet!]!
    planet(id: ID!): Planet
    allStarships: [Starship!]!
    starship(id: ID!): Starship

    # New queries
    allSpecies: [Species!]!
    species(id: ID!): Species
    allFactions: [Faction!]!
    faction(id: ID!): Faction
}

type Mutation {
  createPlanet(input: CreatePlanetInput!): Planet
  updatePlanet(input: UpdatePlanetInput!): Planet
  deletePlanet(id: ID!): Boolean
  createCharacter(input: CreateCharacterInput!): Character
  assignStarship(input: AssignStarshipInput!): Character

  # new mutations
  updateCharacter(input: UpdateCharacterInput!): Character
  deleteCharacter(id: ID!): Boolean
  updateStarship(input: updateStarshipInput!): Starship
  deleteStarship(id: ID!): Boolean
}

input CreatePlanetInput {
  name: String!
  climate: String
  terrain: String
}

input UpdatePlanetInput {
  id: ID!
  name: String
  climate: String
  terrain: String
}

input CreateCharacterInput {
  name: String!
  speciesId: Int
  homePlanetId: Int
  factionId: Int
}

input AssignStarshipInput {
  characterId: ID!
  starshipId: ID!
}

# New input types
input UpdateCharacterInput {
    id: ID!,
    name: String,
    speciesId: Int,
    homePlanetId: Int,
    factionId: Int
}

input updateStarshipInput {
    id: ID!,
    name: String,
    
}

type Character {
  id: ID!
  name: String!
  species: Species
  homePlanet: Planet
  faction: Faction
  pilotedStarships: [Starship!]!
}

type Planet {
  id: ID!
  name: String!
  climate: String
  terrain: String
  residents: [Character!]!
}

type Species {
    id: ID!
    name: String!
    average_lifespan: Int
    classification: String
    language: String
}

type Faction {
    id: ID!
    name: String!
    ideology: String
}

type Starship {
  id: ID!
  name: String!
  model: String
  manufacturer: String
  pilots: [Character!]!
}